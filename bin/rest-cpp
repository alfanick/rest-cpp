#!/usr/bin/python

import sys, os, string, re

class Template(string.Template):
    delimiter = '%'

Makefile = """address?=0.0.0.0
port?=8080
workers?=4
dispatcher?=lc
path?=NONE
size?=0
name?=%name

CXX=/usr/bin/clang++ -Wall -std=c++11 -stdlib=libc++ -O2
INCLUDES=
LIBRARY=-lrestcpp -DSERVER_BIND=$(address) -DSERVER_PORT=$(port) -DSERVER_WORKERS=$(workers) -DSERVER_DISPATCHER_$(dispatcher)

ifneq ($(path),NONE)
LIBRARY+= -DSERVER_PATH=$(path)
pe=$(shell seq 0 $$(( $(size) - 1 )) )
else
pe=$(shell seq $(port) $$(( $(port) + $(size) - 1 )) )
endif

ifneq ($(shell uname),Darwin)
CXX=g++ -std=gnu++11 -Wall -pthread -O2
endif

.PHONY: server build pool
default: server

server: build
\t@DYLD_LIBRARY_PATH=/usr/local/lib LD_LIBRARY_PATH=/usr/local/lib ./%name


pool:
ifeq ($(size),0)
\t@echo "You need to provide size of the pool (size=n)."
else
\t@echo "Building server pool: "
ifeq ($(path),NONE)
\t@$(foreach nport,$(pe),echo "  building $(name).$(nport)"; $(MAKE) build --no-print-directory name="$(name).$(nport)" address=$(address) port=$(nport) workers=$(workers) dispatcher=$(dispatcher);)
else
\t@$(foreach nport,$(pe),echo "  building $(name).$(nport)"; $(MAKE) build --no-print-directory name="$(name).$(nport)" workers=$(workers) dispatcher=$(dispatcher) path="$(path).$(nport)";)
endif

endif

build:
\t@$(CXX) $(INCLUDES) *.cpp -o $(name) $(LIBRARY)

"""

init_cpp = """#include <rest/rest.h>

create_json_service(hello_world) {
  service->response->data["result"] = "Hello world!";
}

void routes(REST::Router* r) {
  r->match("/", hello_world);
}

"""

_inline_cpp = """%router->match("%uri", [](REST::Service* service) {
  throw REST::HTTP::NotImplemented();
});"""

_simple_service_cpp = """create_service(%name) {
  throw REST::HTTP::NotImplemented();
}"""

_json_simple_service_cpp = """create_json_service(%name) {
  throw REST::HTTP::NotImplemented();
}"""

_simple_service_route = '%router->match("%uri", %name);'

resource_cpp = """#include <rest/resource.h>

class %name : public REST::Resource {
  void read() {
    throw REST::HTTP::NotImplemented();
  }
};"""

service_cpp = """#include <rest/service.h>

class %name : public REST::Service {
  void method(REST::Request::Method type) {
    throw REST::HTTP::NotImplemented();
  }
};"""

FILES_LIST = (("Makefile", Makefile), ("init.cpp", init_cpp))

def snake(name):
    s1 = re.sub('(.)([A-Z][a-z]+)', r'\1_\2', name.replace('-', '_'))
    return re.sub('([a-z0-9])([A-Z])', r'\1_\2', s1).lower()

def camel(name):
    return "".join(map(lambda _: str.capitalize(_[0])+_[1:], name.split("_")))

def project(directory='.', required=False):
    name = snake(os.path.basename(os.path.abspath(directory)))

    if required and not os.path.isfile(os.path.join(directory, "Makefile")):
        print("Must be in rest-cpp project!")
        sys.exit(1)

    print("rest-cpp project: %s" % name)

    return name

def save_template(where, what, args={}, force=False, test=False):
    if force or not os.path.isfile(where):
        if not force:
            print("  creating file: %s" % where)
        else:
            print("  saving file: %s" % where)
        content = Template(what).substitute(**args)

        if not test:
            with open(where, "w") as f:
                f.write(content)
        else:
            print(content)
    else:
        print("  skipping file: %s" % where)

def mkdir_if_not_exists(where):
    if not os.path.isdir(where):
        os.makedirs(where)
        print("  creating directory: %s" % where)

def cmd_new(directory):
    full_directory = os.path.abspath(directory)
    name = project(full_directory)

    mkdir_if_not_exists(directory)

    for (filename, content) in FILES_LIST:
        save_template(os.path.join(directory, filename), content, {'name':name})


    print("Done. Have fun!")

init_file = ''
ROUTER_VAR = 'r'

def insert(what, after, where, default_indent = ''):
    lines = []
    last_position = -1
    for regex in after:
        lines = []
        for line in where.split("\n"):
            lines.append(line)
            if re.search(regex, line):
                last_position = len(lines)-1
        if last_position != -1:
            break

    indent = default_indent

    new_indent = re.match('^(\s*)',lines[last_position]).group(1)

    if len(new_indent) > 0:
        indent = new_indent
    what = "\n".join(map(lambda _: indent + _, what.split("\n")))

    lines.insert(last_position+1, what)

    return "\n".join(lines)

def new_lambda():
    uri = sys.argv[3]

    new_file = insert(_inline_cpp,
            [
                re.escape("});"),
                re.escape("%s->match"%ROUTER_VAR),
                re.escape("%s->resource"%ROUTER_VAR),
                re.escape("%s->mount"%ROUTER_VAR),
                "void routes"],
            init_file, default_indent='  ')

    print("  adding inline service")
    print("    matching to: %s" % uri)

    save_template("init.cpp", new_file, {'uri': uri, 'router': ROUTER_VAR},force=True)


def new_simple_service(json=False):
    if len(sys.argv) == 4:
        print("You need to provide both name and URI.")
        sys.exit(1)

    name = snake(sys.argv[3])
    uri = sys.argv[4]

    if not json:
        service_cpp = _simple_service_cpp
        print("  adding simple service: %s" % name)
    else:
        service_cpp = _json_simple_service_cpp
        print("  adding JSON simple service: %s" % name)

    print("    matching to: %s" % uri)

    new_file = insert("\n"+service_cpp,
            [
                re.escape("#include")],
            init_file)

    new_file = insert(_simple_service_route,
            [
                "%s->match\(.*?,[ a-zA-Z_0-9]+\);"%ROUTER_VAR,
                "void routes"],
            new_file, default_indent='  ')

    save_template("init.cpp", new_file, {'uri': uri, 'router': ROUTER_VAR,
        'name': name},force=True)

def new_json_simple_service():
    new_simple_service(json=True)

def new_resource(recursive=False):
    mkdir_if_not_exists("resources")

    classname = camel(sys.argv[3])
    filename = os.path.join("resources", "%s.cpp" % snake(classname))

    print("  adding resource: %s" % classname)

    sys.stdout.write("  ")
    save_template(filename, resource_cpp, {'name': classname})

    if len(sys.argv) == 5:
        uri = sys.argv[4].rstrip("/")
        if len(uri) == 0:
            uri = "/"
        if not recursive:
            route = '%router->resource<%name>("%uri");'
            print("    matching to: %s" % uri)
        else:
            route = '%router->resources<%name>("%uri");'
            print("    matching to: %s" % uri)
            if uri == "/":
                print("    matching to: /*")
            else:
                print("    matching to: %s/*" % uri)
    else:
        uri = "/" + classname.lower()
        if not recursive:
            route = "%router->resource<%name>();"
            print("    matching to: %s" % uri)
        else:
            route = "%router->resources<%name>();"
            print("    matching to: %s" % uri)
            print("    matching to: %s/*" % uri)

    new_file = insert("#include \"%s\"" % filename,
            [
                re.escape('#include "resources/'),
                re.escape('#include <rest/rest.h>')
                ],
            init_file)

    new_file = insert(route,
            [
                "%s->resource"%ROUTER_VAR,
                "void routes"],
            new_file, default_indent='  ')

    sys.stdout.write("  ")
    save_template("init.cpp", new_file,
            {'uri':uri,'name':classname,'router':ROUTER_VAR},force=True)


def new_resources():
    new_resource(recursive=True)

def new_service():
    if len(sys.argv) == 4:
        print("You need to provide both name and URI.")
        sys.exit(1)

    mkdir_if_not_exists("services")

    uri = sys.argv[4]
    classname = camel(sys.argv[3])
    filename = os.path.join("services", "%s.cpp" % snake(classname))

    print("  adding service: %s" % classname)

    sys.stdout.write("  ")
    save_template(filename, service_cpp, {'name': classname})

    print("    matching to: %s" % uri)
    if uri == "/":
        print("    matching to: /*")
    else:
        print("    matching to: %s/*" % uri)

    new_file = insert("#include \"%s\"" % filename,
            [
                re.escape('#include "services/'),
                re.escape('#include <rest/rest.h>')
                ],
            init_file)

    new_file = insert('%router->mount<%name>("%uri");',
            [
                "%s->mount"%ROUTER_VAR,
                "void routes"],
            new_file, default_indent='  ')

    sys.stdout.write("  ")
    save_template("init.cpp", new_file,
            {'uri':uri,'name':classname,'router':ROUTER_VAR},force=True)


GENERATE_ACTIONS = {
    'inline' : new_lambda,
    'i': new_lambda,
    'service' : new_service,
    's': new_service,
    'resource': new_resource,
    'resources': new_resources,
    'r': new_resources,
    'simple': new_simple_service,
    'json': new_json_simple_service,
    'j': new_json_simple_service
}

def cmd_generate():
    global init_file

    if len(sys.argv) == 2:
        print("You need to provide what to generate.")
        sys.exit(1)
    try:
        action = GENERATE_ACTIONS[sys.argv[2]]
    except:
        print("You need to provide right action (inline/service/resource/resources/simple/json)")
        sys.exit(1)
    if len(sys.argv) == 3:
        print("You need to provide a name.")
        sys.exit(1)

    project(required=True)
    with open("init.cpp", "r") as f:
        init_file = f.read()

    ROUTER_VAR = re.search("void\s+routes\(REST::Router\s*\*\s+(.+?)\)", init_file, re.MULTILINE).group(1)

    action()

def cmd_help():
    print("rest-cpp")
    print("REST-like framework and server for blazing fast web applications in C++11.\n")
    print("Commands")
    print("  - new [directory] - create new project or update files")
    print("  - (b)uild - build binary")
    print("  - (s)erver - build and start server")
    print("  - help - show this message")

SHORTCUTS = {'g' : 'generate', 'b' : 'build', 's' : 'server'}

if __name__ == "__main__":
    directory = "."

    if len(sys.argv) == 1:
        cmd_help()
        sys.exit(1)
    elif len(sys.argv) > 1:
        for k,v in SHORTCUTS.iteritems():
            if k == sys.argv[1]:
                sys.argv[1] = v
                break

        if sys.argv[1] == "new":
            if len(sys.argv) == 3:
                directory = sys.argv[2]

            cmd_new(directory)
        elif sys.argv[1] == "build" or sys.argv[1] == "server" or sys.argv[1] == "pool":
            project(required=True)
            os.execvp("make", sys.argv)
        elif sys.argv[1] == "generate":
            cmd_generate()
        else:
            cmd_help()
            sys.exit(1)
