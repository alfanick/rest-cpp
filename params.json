{"name":"rest-cpp","tagline":"REST-like framework and server for blazing fast web applications in C++11.","body":"rest-cpp\r\n========\r\nREST-like framework and server for blazing fast web applications in\r\nC++11.\r\n\r\n\r\nQuick start\r\n-----------\r\n    $ rest-cpp new blog\r\n    $ cd blog\r\n    $ rest-cpp server\r\n\r\nNavigate your browser to http://127.0.0.1:8080 now.\r\n\r\n\r\nBuilding\r\n--------\r\nOn OS X Commanand Line Tools are required; on Linux gcc-4.8 or newer is\r\nrequired. Not tested on other platforms.\r\n\r\n\r\n### Library\r\nBuild library using `make` on root directory.\r\n\r\n### Installation\r\nRun `make install` on project folder - it will build the library and\r\ncopy headers, shared library and generator to `/usr/local`.\r\n\r\n### Example\r\nAfter bulding the [Library](#library), go to `example/todo_server` and use `make`. \r\n\r\n\r\nUsage\r\n-----\r\nYou may build your own apps from scratch, but you can just `#include <rest/rest.h>`\r\nand use simplified workflow. To make it even easier, you can use `rest-cpp` utility\r\nto do some work for you.\r\n\r\n### rest-cpp utility\r\n`rest-cpp` allows you to create and manage app.\r\nIt is installed to `/usr/local/bin` and requires Python in version at\r\nleast 2.5 (which probably you have already installed).\r\n\r\n#### New application\r\nUse `rest-cpp new [directory]` to create new application. `directory`\r\nisn't required, app will be created in current directory if omitted.\r\n\r\nCreated are two files:\r\n  - `init.cpp` with basic \"hello world\"\r\n  - `Makefile` with build commands\r\n\r\nExisting files are skipped, to update file to new version, just remove\r\nprevious one.\r\n\r\n##### Makefile\r\nAvailable tasks:\r\n  - `make server` - default action, build and start server\r\n  - `make build` - build server\r\n\r\nAvailable options:\r\n  - `address=ip_or_host` - address for server to bind, default: `0.0.0.0`\r\n  - `port=number` - port to listen, default: `8080` (ports lower than 1024 may require superuser privileges)\r\n  - `workers=number` - number of workers, default: `4`\r\n  - `dispatcher=lc/rr` - workers dispatcher algorithm - `lc` for `LeastConnections`, `rr` for `RoundRobin`, default: `lc`\r\n\r\nTo use options pass them to `make`, i.e. `make server workers=2 port=9000`.\r\nOptions are complitation-time, not runtime - this means, to i.e. change\r\nport, you must pass port to make during building process.\r\n\r\n*`rest-cpp` wraps make, so you can use `rest-cpp build` and `rest-cpp server` instead of\r\nmake (you can use the same options as above).*\r\n\r\n\r\nExample\r\n-------\r\nlorem ipsum\r\n\r\n\r\nBasis of operation\r\n------------------\r\nlorem ipsum\r\n\r\n\r\nAuthors\r\n-------\r\n- Amadeusz Juskowiak - amadeusz[at]me.com\r\n- Błażej Kotowski - kotowski.blazej[at]gmail.com\r\n\r\nMade with love, inspired by put.poznan.pl\r\n","google":"UA-48179210-1","note":"Don't delete this file! It's used internally to help with page regeneration."}